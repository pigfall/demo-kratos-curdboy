// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.6.1
// source: dept/v1/dept_gen.proto

package pbdept

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	api "github.com/pigfall/demo-kratos-curdboy/api"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDeptCreate = "/dept.v1.Dept/Create"
const OperationDeptQuery = "/dept.v1.Dept/Query"

type DeptHTTPServer interface {
	Create(context.Context, *structpb.Struct) (*DeptCreateResponse, error)
	Query(context.Context, *api.QueryRequest) (*DeptQueryResponse, error)
}

func RegisterDeptHTTPServer(s *http.Server, srv DeptHTTPServer) {
	r := s.Route("/")
	r.POST("/dept", _Dept_Create0_HTTP_Handler(srv))
	r.GET("/dept", _Dept_Query0_HTTP_Handler(srv))
}

func _Dept_Create0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in structpb.Struct
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*structpb.Struct))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Dept_Query0_HTTP_Handler(srv DeptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in api.QueryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeptQuery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Query(ctx, req.(*api.QueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeptQueryResponse)
		return ctx.Result(200, reply)
	}
}

type DeptHTTPClient interface {
	Create(ctx context.Context, req *structpb.Struct, opts ...http.CallOption) (rsp *DeptCreateResponse, err error)
	Query(ctx context.Context, req *api.QueryRequest, opts ...http.CallOption) (rsp *DeptQueryResponse, err error)
}

type DeptHTTPClientImpl struct {
	cc *http.Client
}

func NewDeptHTTPClient(client *http.Client) DeptHTTPClient {
	return &DeptHTTPClientImpl{client}
}

func (c *DeptHTTPClientImpl) Create(ctx context.Context, in *structpb.Struct, opts ...http.CallOption) (*DeptCreateResponse, error) {
	var out DeptCreateResponse
	pattern := "/dept"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeptCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeptHTTPClientImpl) Query(ctx context.Context, in *api.QueryRequest, opts ...http.CallOption) (*DeptQueryResponse, error) {
	var out DeptQueryResponse
	pattern := "/dept"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeptQuery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
